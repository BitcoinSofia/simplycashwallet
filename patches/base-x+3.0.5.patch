diff --git a/node_modules/base-x/index.js b/node_modules/base-x/index.js
index 2fbe2e7..f009e84 100644
--- a/node_modules/base-x/index.js
+++ b/node_modules/base-x/index.js
@@ -12,9 +12,9 @@ module.exports = function base (ALPHABET) {
   const BASE_MAP = new Uint8Array(256)
   BASE_MAP.fill(255)
 
-  for (let i = 0; i < ALPHABET.length; i++) {
-    const x = ALPHABET.charAt(i)
-    const xc = x.charCodeAt(0)
+  for (var i = 0; i < ALPHABET.length; i++) {
+    var x = ALPHABET.charAt(i)
+    var xc = x.charCodeAt(0)
 
     if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')
     BASE_MAP[xc] = i
@@ -30,9 +30,9 @@ module.exports = function base (ALPHABET) {
     if (source.length === 0) return ''
 
     // Skip & count leading zeroes.
-    let zeroes = 0
-    let length = 0
-    let pbegin = 0
+    var zeroes = 0
+    var length = 0
+    var pbegin = 0
     const pend = source.length
 
     while (pbegin !== pend && source[pbegin] === 0) {
@@ -46,11 +46,11 @@ module.exports = function base (ALPHABET) {
 
     // Process the bytes.
     while (pbegin !== pend) {
-      let carry = source[pbegin]
+      var carry = source[pbegin]
 
       // Apply "b58 = b58 * 256 + ch".
-      let i = 0
-      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {
+      var i = 0
+      for (var it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {
         carry += (256 * b58[it]) >>> 0
         b58[it] = (carry % BASE) >>> 0
         carry = (carry / BASE) >>> 0
@@ -62,13 +62,13 @@ module.exports = function base (ALPHABET) {
     }
 
     // Skip leading zeroes in base58 result.
-    let it = size - length
+    var it = size - length
     while (it !== size && b58[it] === 0) {
       it++
     }
 
     // Translate the result into a string.
-    let str = LEADER.repeat(zeroes)
+    var str = LEADER.repeat(zeroes)
     for (; it < size; ++it) str += ALPHABET.charAt(b58[it])
 
     return str
@@ -78,14 +78,14 @@ module.exports = function base (ALPHABET) {
     if (typeof source !== 'string') throw new TypeError('Expected String')
     if (source.length === 0) return Buffer.alloc(0)
 
-    let psz = 0
+    var psz = 0
 
     // Skip leading spaces.
     if (source[psz] === ' ') return
 
     // Skip and count leading '1's.
-    let zeroes = 0
-    let length = 0
+    var zeroes = 0
+    var length = 0
     while (source[psz] === LEADER) {
       zeroes++
       psz++
@@ -98,13 +98,13 @@ module.exports = function base (ALPHABET) {
     // Process the characters.
     while (source[psz]) {
       // Decode character
-      let carry = BASE_MAP[source.charCodeAt(psz)]
+      var carry = BASE_MAP[source.charCodeAt(psz)]
 
       // Invalid character
       if (carry === 255) return
 
-      let i = 0
-      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {
+      var i = 0
+      for (var it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {
         carry += (BASE * b256[it]) >>> 0
         b256[it] = (carry % 256) >>> 0
         carry = (carry / 256) >>> 0
@@ -119,7 +119,7 @@ module.exports = function base (ALPHABET) {
     if (source[psz] === ' ') return
 
     // Skip leading zeroes in b256.
-    let it = size - length
+    var it = size - length
     while (it !== size && b256[it] === 0) {
       it++
     }
@@ -127,7 +127,7 @@ module.exports = function base (ALPHABET) {
     const vch = Buffer.allocUnsafe(zeroes + (size - it))
     vch.fill(0x00, 0, zeroes)
 
-    let j = zeroes
+    var j = zeroes
     while (it !== size) {
       vch[j++] = b256[it++]
     }
